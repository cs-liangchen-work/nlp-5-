一般先Dataset处理数据
然后再Dataloader，  Dataloader中可以直接设置训练的批量。
但是collate_fn  依然不清楚怎么回事，比如定义的offset是什么呢？


import torch
import torchtext
from torchtext.datasets import text_classification
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
import time
from torch.utils.data.dataset import random_split
# ======================================= 读取数据 ======================================= #
NGRAMS = 2
import os
if not os.path.isdir('./.data'):  # 判断有没有目录。
    os.mkdir('./.data')
# 使用库里面自带的数据集。需要翻墙。
train_dataset, test_dataset = text_classification.DATASETS['AG_NEWS'](
    root='./.data', ngrams=NGRAMS, vocab=None)
BATCH_SIZE = 16
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# print(train_dataset)
# <torchtext.datasets.text_classification.TextClassificationDataset object at 0x0000026152146EC8>

# ======================================= 定义模型 ======================================= #
class TextSentiment(nn.Module):  # 仅仅是embedding之后是一个简单的线性层。
    def __init__(self, vocab_size, embed_dim, num_class):
        super().__init__()
        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)
        self.fc = nn.Linear(embed_dim, num_class)
        self.init_weights()

    def init_weights(self):
        # 随机初始化参数，把权重都随机初始化了，但是偏执项全部制成了0。
        initrange = 0.5
        self.embedding.weight.data.uniform_(-initrange, initrange)
        self.fc.weight.data.uniform_(-initrange, initrange)
        self.fc.bias.data.zero_()

    def forward(self, text, offsets):
        embedded = self.embedding(text, offsets)
        return self.fc(embedded)

# =======================================  ======================================= #
VOCAB_SIZE = len(train_dataset.get_vocab())
EMBED_DIM = 32
NUN_CLASS = len(train_dataset.get_labels())
# print(VOCAB_SIZE) 1308844
# print(NUN_CLASS) 4
model = TextSentiment(VOCAB_SIZE, EMBED_DIM, NUN_CLASS).to(device)


# ======================================= generate_batch ======================================= #
def generate_batch(batch):
    label = torch.tensor([entry[0] for entry in batch])
    text = [entry[1] for entry in batch]
    offsets = [0] + [len(entry) for entry in text]
    # torch.Tensor.cumsum returns the cumulative sum
    # of elements in the dimension dim.
    # torch.Tensor([1.0, 2.0, 3.0]).cumsum(dim=0)

    offsets = torch.tensor(offsets[:-1]).cumsum(dim=0)
    text = torch.cat(text)
    return text, offsets, label
    # 不清楚offsetss要干什么？？？？？？
# ======================================= 训练函数 ======================================= #
def train_func(sub_train_):
    # Train the model
    train_loss = 0
    train_acc = 0
    # 已经不止一次的强调过，有一个自动分批次的函数，那就是DataLoader。
    data = DataLoader(sub_train_, batch_size=BATCH_SIZE, shuffle=True,
                      collate_fn=generate_batch)
    for i, (text, offsets, cls) in enumerate(data):
        optimizer.zero_grad()
        text, offsets, cls = text.to(device), offsets.to(device), cls.to(device)
        output = model(text, offsets)
        loss = criterion(output, cls)
        train_loss += loss.item()
        loss.backward()
        optimizer.step()
        train_acc += (output.argmax(1) == cls).sum().item()
    # Adjust the learning rate
    scheduler.step()
    return train_loss / len(sub_train_), train_acc / len(sub_train_)

def test(data_):
    loss = 0
    acc = 0
    data = DataLoader(data_, batch_size=BATCH_SIZE, collate_fn=generate_batch)
    for text, offsets, cls in data:
        text, offsets, cls = text.to(device), offsets.to(device), cls.to(device)
        with torch.no_grad():
            output = model(text, offsets)
            loss = criterion(output, cls)
            loss += loss.item()
            acc += (output.argmax(1) == cls).sum().item()
    return loss / len(data_), acc / len(data_)
# ======================================= 开始训练啦！ ======================================= #
N_EPOCHS = 5
min_valid_loss = float('inf')

# 定义损失函数。
criterion = torch.nn.CrossEntropyLoss().to(device)
# 定义优化器。
optimizer = torch.optim.SGD(model.parameters(), lr=4.0)
# 更新学习率的一种方式。
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1, gamma=0.9)

# 将数据集划分为训练集和测试集和测试集  95%   5%
# random_split   随机划分。
train_len = int(len(train_dataset) * 0.95)
sub_train_, sub_valid_ = \
    random_split(train_dataset, [train_len, len(train_dataset) - train_len])

for epoch in range(N_EPOCHS):
    start_time = time.time()
    train_loss, train_acc = train_func(sub_train_)
    valid_loss, valid_acc = test(sub_valid_)
    secs = int(time.time() - start_time)
    mins = secs / 60
    secs = secs % 60
    print('Epoch: %d' %(epoch + 1), " | time in %d minutes, %d seconds" %(mins, secs))
    print(f'\tLoss: {train_loss:.4f}(train)\t|\tAcc: {train_acc * 100:.1f}%(train)')
    print(f'\tLoss: {valid_loss:.4f}(valid)\t|\tAcc: {valid_acc * 100:.1f}%(valid)')

结果查看：

D:\anaconda3\envs\TF2.1\python.exe D:/PycharmProjects/mook/nlp/nlp-pytorch/5.torchtext-文本分类/code.py
120000lines [00:11, 10302.42lines/s]
120000lines [00:20, 5818.13lines/s]
7600lines [00:01, 6089.72lines/s]
Epoch: 1  | time in 1 minutes, 5 seconds
	Loss: 0.0262(train)	|	Acc: 84.6%(train)
	Loss: 0.0001(valid)	|	Acc: 90.4%(valid)
Epoch: 2  | time in 0 minutes, 57 seconds
	Loss: 0.0119(train)	|	Acc: 93.7%(train)
	Loss: 0.0002(valid)	|	Acc: 91.0%(valid)
Epoch: 3  | time in 0 minutes, 57 seconds
	Loss: 0.0069(train)	|	Acc: 96.3%(train)
	Loss: 0.0002(valid)	|	Acc: 91.3%(valid)
Epoch: 4  | time in 0 minutes, 54 seconds
	Loss: 0.0039(train)	|	Acc: 98.1%(train)
	Loss: 0.0001(valid)	|	Acc: 91.0%(valid)
Epoch: 5  | time in 0 minutes, 54 seconds
	Loss: 0.0022(train)	|	Acc: 99.0%(train)
	Loss: 0.0002(valid)	|	Acc: 91.1%(valid)

Process finished with exit code 0














再来看一遍：
import torch
import torchtext
from torchtext.datasets import text_classification
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
import time
from torch.utils.data.dataset import random_split
# ======================================= 读取数据 ======================================= #
NGRAMS = 2
import os
if not os.path.isdir('./.data'):  # 判断有没有目录。
    os.mkdir('./.data')
# 使用库里面自带的数据集。需要翻墙。
train_dataset, test_dataset = text_classification.DATASETS['AG_NEWS'](
    root='./.data', ngrams=NGRAMS, vocab=None)
BATCH_SIZE = 16
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# print(train_dataset)
# <torchtext.datasets.text_classification.TextClassificationDataset object at 0x0000026152146EC8>

# ======================================= 定义模型 ======================================= #
class TextSentiment(nn.Module):  # 仅仅是embedding之后是一个简单的线性层。
    def __init__(self, vocab_size, embed_dim, num_class):
        super().__init__()
        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)
        self.fc = nn.Linear(embed_dim, num_class)
        self.init_weights()

    def init_weights(self):
        # 随机初始化参数，把权重都随机初始化了，但是偏执项全部制成了0。
        initrange = 0.5
        self.embedding.weight.data.uniform_(-initrange, initrange)
        self.fc.weight.data.uniform_(-initrange, initrange)
        self.fc.bias.data.zero_()

    def forward(self, text, offsets):
        embedded = self.embedding(text, offsets)
        return self.fc(embedded)

# =======================================  ======================================= #
VOCAB_SIZE = len(train_dataset.get_vocab())
EMBED_DIM = 32
NUN_CLASS = len(train_dataset.get_labels())
# print(VOCAB_SIZE) 1308844
# print(NUN_CLASS) 4
model = TextSentiment(VOCAB_SIZE, EMBED_DIM, NUN_CLASS).to(device)

# ======================================= generate_batch ======================================= #
def generate_batch(batch):
    label = torch.tensor([entry[0] for entry in batch])
    text = [entry[1] for entry in batch]
    offsets = [0] + [len(entry) for entry in text]
    # torch.Tensor.cumsum returns the cumulative sum
    # of elements in the dimension dim.
    # torch.Tensor([1.0, 2.0, 3.0]).cumsum(dim=0)

    offsets = torch.tensor(offsets[:-1]).cumsum(dim=0)
    text = torch.cat(text)
    return text, offsets, label

# ======================================= 训练函数 ======================================= #
def train_func(sub_train_):
    # Train the model
    train_loss = 0
    train_acc = 0

    data = DataLoader(sub_train_, batch_size=BATCH_SIZE, shuffle=True,
                      collate_fn=generate_batch)
    for i, (text, offsets, cls) in enumerate(data):
        optimizer.zero_grad()
        text, offsets, cls = text.to(device), offsets.to(device), cls.to(device)
        # print(text)
        print(text.shape)
        # 为什么这么奇怪呢，因为用的是EmbeddingBag。。。。对教程代码彻底无语，你就不能【batch_size，句子长度】 然后用embedding
        # torch.Size([1284])
        # print(offsets.shape) torch.Size([16])
        print(offsets)
        output = model(text, offsets)
        # print(output.shape) torch.Size([16, 4])
        loss = criterion(output, cls)
        train_loss += loss.item()
        loss.backward()
        optimizer.step()
        train_acc += (output.argmax(1) == cls).sum().item()
    # Adjust the learning rate
    scheduler.step()
    return train_loss / len(sub_train_), train_acc / len(sub_train_)

def test(data_):
    loss = 0
    acc = 0
    data = DataLoader(data_, batch_size=BATCH_SIZE, collate_fn=generate_batch)
    for text, offsets, cls in data:
        text, offsets, cls = text.to(device), offsets.to(device), cls.to(device)
        with torch.no_grad():
            output = model(text, offsets)
            loss = criterion(output, cls)
            loss += loss.item()
            acc += (output.argmax(1) == cls).sum().item()
    return loss / len(data_), acc / len(data_)
# ======================================= 开始训练啦！ ======================================= #
N_EPOCHS = 5
min_valid_loss = float('inf')

# 定义损失函数。
criterion = torch.nn.CrossEntropyLoss().to(device)
# 定义优化器。
optimizer = torch.optim.SGD(model.parameters(), lr=4.0)
# 更新学习率的一种方式。
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1, gamma=0.9)

# 将数据集划分为训练集和测试集和测试集  95%   5%
# random_split   随机划分。
train_len = int(len(train_dataset) * 0.95)
sub_train_, sub_valid_ = random_split(train_dataset, [train_len, len(train_dataset) - train_len])
# print(sub_train_) <torch.utils.data.dataset.Subset object at 0x000001B26FE89988>
for epoch in range(N_EPOCHS):
    start_time = time.time()
    train_loss, train_acc = train_func(sub_train_)
    valid_loss, valid_acc = test(sub_valid_)
    secs = int(time.time() - start_time)
    mins = secs / 60
    secs = secs % 60
    print('Epoch: %d' %(epoch + 1), " | time in %d minutes, %d seconds" %(mins, secs))
    print(f'\tLoss: {train_loss:.4f}(train)\t|\tAcc: {train_acc * 100:.1f}%(train)')
    print(f'\tLoss: {valid_loss:.4f}(valid)\t|\tAcc: {valid_acc * 100:.1f}%(valid)')

