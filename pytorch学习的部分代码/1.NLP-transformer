该部分是实现transformer的一个代码，预测输入之后的下一个字是什么。




唯一的一点不清楚：
    mask对自注意力矩阵进行处理，那么mask的大小应该与自注意力矩阵的大小一致，
    但是代码中是和句子的大小一致？？？？？
    https://blog.csdn.net/qq_35169059/article/details/101678207

加注释的代码：
import math
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import TransformerEncoder, TransformerEncoderLayer
# ======================================= 定义transformer的结构 ======================================= #
class TransformerModel(nn.Module):

    def __init__(self, ntoken, ninp, nhead, nhid, nlayers, dropout=0.5):
        super(TransformerModel, self).__init__()
        self.model_type = 'Transformer'
        self.pos_encoder = PositionalEncoding(ninp, dropout)
        # 自己定义的一个位置嵌入。
        encoder_layers = TransformerEncoderLayer(ninp, nhead, nhid, dropout)
        # ninp 词向量嵌入的维度。
        # encoder中核心的两步：self-attention, feedfoward, 经过这两步形状都不变。
        self.transformer_encoder = TransformerEncoder(encoder_layers, nlayers)
        # 指定多少层用TransformerEncoderLaye定义的网络。
        self.encoder = nn.Embedding(ntoken, ninp)
        # 第一个参数 词的个数，第二个参数 嵌入的维度。
        self.ninp = ninp  # ninp 词向量的深度。
        self.decoder = nn.Linear(ninp, ntoken)
        # 线性层，把多少维变成多少维。   相当于把词向量的深度变成了词的个数。
        self.init_weights()

    def generate_square_subsequent_mask(self, sz):
        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)
        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))
        # 明白了！
        # triu函数是将右下角的全部变成0，然后再使用一下transpose将第一维度和第二维度进行了变换，
        # 就得到了如下矩阵，   为sz行，sz列，
        # [1, 0, 0, 0]
        # [1, 1, 0, 0]
        # [1, 1, 1, 0]
        # [1, 1, 1, 1]
        # 第二步是将上述矩阵的0 全部变成 -inf 即负无穷，  将1 全部变为0.
        # 这样加上自注意力矩阵之后，为 0 的位置就得到了一个很大的偏执项， 进行求softmax时 损失的概率就很少很少了。
        # 这也符合 该例子中使用之前的预测之后的，之后的词是不能被看到的。
        # tensor([[0., -inf, -inf, -inf],
        #         [0., 0., -inf, -inf],
        #         [0., 0., 0., -inf],
        #         [0., 0., 0., 0.]])
        return mask

    def init_weights(self):
        # embedding嵌入层的随机初始化。
        initrange = 0.1
        self.encoder.weight.data.uniform_(-initrange, initrange)
        self.decoder.bias.data.zero_()
        self.decoder.weight.data.uniform_(-initrange, initrange)

    def forward(self, src, src_mask):
        src = self.encoder(src) * math.sqrt(self.ninp)  # 一般的嵌入向量层
        src = self.pos_encoder(src)  # 加入位置信息的嵌入向量
        output = self.transformer_encoder(src, src_mask)  # N个encoder
        output = self.decoder(output)  # decoder，就是一个简单的线性层。
        return output

class PositionalEncoding(nn.Module):

    def __init__(self, d_model, dropout=0.1, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

# ======================================= 加载并处理数据集 ======================================= #

import torchtext
from torchtext.data.utils import get_tokenizer
TEXT = torchtext.data.Field(tokenize=get_tokenizer("basic_english"),
                            init_token='<sos>',
                            eos_token='<eos>',
                            lower=True)
train_txt, val_txt, test_txt = torchtext.datasets.WikiText2.splits(TEXT)
# datasets.splits的用法有很多，感觉这个就是用来提取内部的数据集。
# wikitext-2数据集,是torchtext中自然语言建模数据集之一。
# 对数据集使用上述的Field。
TEXT.build_vocab(train_txt)
# Field对象TEXT通过调用build_vocab()方法来生成一个内置的Vocab对象。
# 而且只能够通过train_txt，不能使用验证集 和 测试集的，否则很容易出现过拟合。
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 定义一个分批次的函数。
def batchify(data, bsz):
    data = TEXT.numericalize([data.examples[0].text])
    # numericalize ：
    # Each item in the minibatch will be numericalized independently and the
    # resulting tensors will be stacked at the first dimension.
    # 这里暂时没有深入的看：data.examples[0].text

    # Divide the dataset into bsz parts.
    nbatch = data.size(0) // bsz
    # 因为data是一个nlp的数据，一般为三维的（此时不包括批量的大小），在进行划分时显然是根据第一维来进行的。

    # Trim off any extra elements that wouldn't cleanly fit (remainders).
    data = data.narrow(0, 0, nbatch * bsz)
    # 进行的是这一个处理：加入我有10个数据，我现在每个批次为4，所以一共有2个批次，只需要前8个就可以啦。
    # `x.narrow`(*dimension*, *start*, *length*)
    # 表示取变量x的第dimension维,的从索引start开始到,start+length范围的值。
    # 从第一维度（表示句子的个数），从第0个句子开始，进行的长度为nbatch * bsz， 只需要取这么多句子出来。

    # Evenly divide the data across the bsz batches.
    data = data.view(bsz, -1).t().contiguous()
    # 不想深入的理解实现了，反正就是实现了这样的一个目的：
    # 变成了4维的了，第一维度batch的大小，即view函数（view就是一个变形函数）中的第一个参数，
    # 然后通过后面的t().contiguous()   应该就实现了 第二个维度句子的个数，第三个维度句子中词的个数，
    # 第四个维度每一个句子的词嵌入深度。
    return data.to(device)

batch_size = 20
eval_batch_size = 10
train_data = batchify(train_txt, batch_size)
val_data = batchify(val_txt, eval_batch_size)
test_data = batchify(test_txt, eval_batch_size)

# ======================================= Functions to generate input and target sequence ======================================= #

bptt = 35
def get_batch(source, i):
    seq_len = min(bptt, len(source) - 1 - i)
    data = source[i:i+seq_len]
    target = source[i+1:i+1+seq_len].reshape(-1)
    # 看这里，data 获取的是[i:i+seq_len]   而 target 获取的是[i+1:i+seq_len+1]   然后弄成一列
    # 这符合对数据集的处理，  标签为下一个词。
    return data, target

ntokens = len(TEXT.vocab.stoi)  # the size of vocabulary   itos表示index to str  词汇的总数。
# 也是decoder中的线性层要输出的大小，就是预测词典中每一个词汇是下一个词汇的可能性吧！
emsize = 200  # embedding dimension   词向量的深度
nhid = 200  # the dimension of the feedforward network model in nn.TransformerEncoder
nlayers = 2  # the number of nn.TransformerEncoderLayer in nn.TransformerEncoder   encoder的层数
nhead = 2  # the number of heads in the multiheadattention models     多头的头的个数。
dropout = 0.2  # the dropout value
model = TransformerModel(ntokens, emsize, nhead, nhid, nlayers, dropout).to(device)

criterion = nn.CrossEntropyLoss()  # 定义损失函数为交叉熵函数。
lr = 5.0  # learning rate
optimizer = torch.optim.SGD(model.parameters(), lr=lr)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1.0, gamma=0.95)
# 调整学习率。
# 使用的是学习率的指数衰减公式。
# optimizer使用的优化器      1.0 多少step_size进行一次衰减，    衰减的乘法因子。

import time
def train():
    model.train()  # Turn on the train mode
    total_loss = 0.
    start_time = time.time()
    ntokens = len(TEXT.vocab.stoi)
    # stoi：
    # mapping token strings to numerical identifiers.
    # 获取到了词的个数吧，
    src_mask = model.generate_square_subsequent_mask(bptt).to(device)
    for batch, i in enumerate(range(0, train_data.size(0) - 1, bptt)):
        # 第三个参数是指每次的步长！
        data, targets = get_batch(train_data, i)
        # print(data.shape)         torch.Size([35, 20])
        # print(targets.shape)      torch.Size([700])
        optimizer.zero_grad()
        if data.size(0) != bptt:
            src_mask = model.generate_square_subsequent_mask(data.size(0)).to(device)
        # 使用if 进行判断，就是为了使得，得到的src_mask矩阵的大小 和 data的第一个维度相同。
        # 为什么有必要呢？可能边界，没多大意思，不考虑了。
        #
        # print(src_mask.shape)  torch.Size([35, 35])
        output = model(data, src_mask)
        # print(output.shape)
        # torch.Size([35, 20, 28785])
        loss = criterion(output.view(-1, ntokens), targets)
        # output.view(-1, ntokens)之后，向量的维度变为 [700]
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 0.5)
        # （在BP过程中，感觉应该是和梯度相关的操作）会产生梯度消失/爆炸（就是偏导无限接近0，导致长时记忆无法更新），
        # 那么最简单粗暴的方法，设定阈值，当梯度小于/大于阈值时，更新的梯度为阈值，
        # nn.utils.clip_grad_norm
        # 第一个参数：对谁？  模型的参数。
        # 第二个参数： 梯度的最大范数
        # 第三个参数： 规定范数的类型，默认为L2（原文：type of the used p-norm. Can be'inf'for infinity norm）
        optimizer.step()

        total_loss += loss.item()
        log_interval = 200
        if batch % log_interval == 0 and batch > 0:
            cur_loss = total_loss / log_interval
            elapsed = time.time() - start_time
            print('| epoch {:3d} | {:5d}/{:5d} batches | '
                  'lr {:02.2f} | ms/batch {:5.2f} | '
                  'loss {:5.2f} | ppl {:8.2f}'.format(
                    epoch, batch, len(train_data) // bptt, scheduler.get_lr()[0],
                    elapsed * 1000 / log_interval,
                    cur_loss, math.exp(cur_loss)))
            total_loss = 0
            start_time = time.time()

def evaluate(eval_model, data_source):
    eval_model.eval() # Turn on the evaluation mode
    total_loss = 0.
    ntokens = len(TEXT.vocab.stoi)
    src_mask = model.generate_square_subsequent_mask(bptt).to(device)
    with torch.no_grad():
        for i in range(0, data_source.size(0) - 1, bptt):
            data, targets = get_batch(data_source, i)
            if data.size(0) != bptt:
                src_mask = model.generate_square_subsequent_mask(data.size(0)).to(device)
            output = eval_model(data, src_mask)
            output_flat = output.view(-1, ntokens)
            total_loss += len(data) * criterion(output_flat, targets).item()
    return total_loss / (len(data_source) - 1)

best_val_loss = float("inf")
epochs = 3  # The number of epochs
best_model = None

for epoch in range(1, epochs + 1):
    epoch_start_time = time.time()
    train()
    val_loss = evaluate(model, val_data)
    print('-' * 89)
    print('| end of epoch {:3d} | time: {:5.2f}s | valid loss {:5.2f} | '
          'valid ppl {:8.2f}'.format(epoch, (time.time() - epoch_start_time),
                                     val_loss, math.exp(val_loss)))
    print('-' * 89)

    if val_loss < best_val_loss:
        best_val_loss = val_loss
        best_model = model

    scheduler.step()







运行结果：

D:\anaconda3\envs\TF2.1\python.exe D:/PycharmProjects/mook/caicai2.py
downloading wikitext-2-v1.zip
.data\wikitext-2\wikitext-2-v1.zip: 100%|██████████| 4.48M/4.48M [03:05<00:00, 24.2kB/s]
extracting
| epoch   1 |   200/ 2981 batches | lr 5.00 | ms/batch 662.30 | loss  8.04 | ppl  3088.89
D:\anaconda3\envs\TF2.1\lib\site-packages\torch\optim\lr_scheduler.py:370: UserWarning: To get the last learning rate computed by the scheduler, please use `get_last_lr()`.
  "please use `get_last_lr()`.", UserWarning)
| epoch   1 |   400/ 2981 batches | lr 5.00 | ms/batch 624.07 | loss  6.79 | ppl   892.82
| epoch   1 |   600/ 2981 batches | lr 5.00 | ms/batch 650.68 | loss  6.38 | ppl   592.80
| epoch   1 |   800/ 2981 batches | lr 5.00 | ms/batch 625.40 | loss  6.23 | ppl   508.73
| epoch   1 |  1000/ 2981 batches | lr 5.00 | ms/batch 603.85 | loss  6.12 | ppl   454.25
| epoch   1 |  1200/ 2981 batches | lr 5.00 | ms/batch 632.43 | loss  6.10 | ppl   444.64
| epoch   1 |  1400/ 2981 batches | lr 5.00 | ms/batch 668.82 | loss  6.05 | ppl   422.34
| epoch   1 |  1600/ 2981 batches | lr 5.00 | ms/batch 625.58 | loss  6.05 | ppl   425.13
| epoch   1 |  1800/ 2981 batches | lr 5.00 | ms/batch 631.34 | loss  5.96 | ppl   385.86
| epoch   1 |  2000/ 2981 batches | lr 5.00 | ms/batch 692.37 | loss  5.95 | ppl   384.92
| epoch   1 |  2200/ 2981 batches | lr 5.00 | ms/batch 730.13 | loss  5.85 | ppl   348.05
| epoch   1 |  2400/ 2981 batches | lr 5.00 | ms/batch 645.70 | loss  5.89 | ppl   361.99
| epoch   1 |  2600/ 2981 batches | lr 5.00 | ms/batch 627.73 | loss  5.90 | ppl   363.39
| epoch   1 |  2800/ 2981 batches | lr 5.00 | ms/batch 627.21 | loss  5.80 | ppl   329.54
-----------------------------------------------------------------------------------------
| end of epoch   1 | time: 2018.60s | valid loss  5.78 | valid ppl   324.38
-----------------------------------------------------------------------------------------
| epoch   2 |   200/ 2981 batches | lr 4.51 | ms/batch 626.19 | loss  5.80 | ppl   331.57
| epoch   2 |   400/ 2981 batches | lr 4.51 | ms/batch 664.89 | loss  5.78 | ppl   322.62
| epoch   2 |   600/ 2981 batches | lr 4.51 | ms/batch 797.37 | loss  5.61 | ppl   273.63
| epoch   2 |   800/ 2981 batches | lr 4.51 | ms/batch 726.75 | loss  5.64 | ppl   281.75
| epoch   2 |  1000/ 2981 batches | lr 4.51 | ms/batch 697.12 | loss  5.59 | ppl   266.98
| epoch   2 |  1200/ 2981 batches | lr 4.51 | ms/batch 682.32 | loss  5.61 | ppl   273.99
| epoch   2 |  1400/ 2981 batches | lr 4.51 | ms/batch 673.93 | loss  5.63 | ppl   278.93
| epoch   2 |  1600/ 2981 batches | lr 4.51 | ms/batch 698.71 | loss  5.67 | ppl   289.00
| epoch   2 |  1800/ 2981 batches | lr 4.51 | ms/batch 687.00 | loss  5.59 | ppl   267.86
| epoch   2 |  2000/ 2981 batches | lr 4.51 | ms/batch 701.47 | loss  5.62 | ppl   276.96
| epoch   2 |  2200/ 2981 batches | lr 4.51 | ms/batch 666.02 | loss  5.52 | ppl   249.48
| epoch   2 |  2400/ 2981 batches | lr 4.51 | ms/batch 677.42 | loss  5.59 | ppl   266.82
| epoch   2 |  2600/ 2981 batches | lr 4.51 | ms/batch 723.73 | loss  5.59 | ppl   267.94
| epoch   2 |  2800/ 2981 batches | lr 4.51 | ms/batch 639.62 | loss  5.52 | ppl   248.40
-----------------------------------------------------------------------------------------
| end of epoch   2 | time: 2153.54s | valid loss  5.61 | valid ppl   273.38
-----------------------------------------------------------------------------------------
| epoch   3 |   200/ 2981 batches | lr 4.29 | ms/batch 665.02 | loss  5.55 | ppl   256.22
| epoch   3 |   400/ 2981 batches | lr 4.29 | ms/batch 651.29 | loss  5.55 | ppl   257.53
| epoch   3 |   600/ 2981 batches | lr 4.29 | ms/batch 645.70 | loss  5.37 | ppl   214.03
| epoch   3 |   800/ 2981 batches | lr 4.29 | ms/batch 630.60 | loss  5.42 | ppl   224.94
| epoch   3 |  1000/ 2981 batches | lr 4.29 | ms/batch 739.30 | loss  5.37 | ppl   215.05
| epoch   3 |  1200/ 2981 batches | lr 4.29 | ms/batch 712.73 | loss  5.41 | ppl   223.71
| epoch   3 |  1400/ 2981 batches | lr 4.29 | ms/batch 627.22 | loss  5.44 | ppl   229.38
| epoch   3 |  1600/ 2981 batches | lr 4.29 | ms/batch 627.67 | loss  5.47 | ppl   237.95
| epoch   3 |  1800/ 2981 batches | lr 4.29 | ms/batch 622.92 | loss  5.40 | ppl   221.64
| epoch   3 |  2000/ 2981 batches | lr 4.29 | ms/batch 623.51 | loss  5.43 | ppl   229.02
| epoch   3 |  2200/ 2981 batches | lr 4.29 | ms/batch 621.68 | loss  5.32 | ppl   203.77
| epoch   3 |  2400/ 2981 batches | lr 4.29 | ms/batch 622.47 | loss  5.40 | ppl   221.54
| epoch   3 |  2600/ 2981 batches | lr 4.29 | ms/batch 620.22 | loss  5.41 | ppl   223.39
| epoch   3 |  2800/ 2981 batches | lr 4.29 | ms/batch 623.57 | loss  5.34 | ppl   208.35
-----------------------------------------------------------------------------------------
| end of epoch   3 | time: 2013.15s | valid loss  5.50 | valid ppl   244.36
-----------------------------------------------------------------------------------------

Process finished with exit code 0
